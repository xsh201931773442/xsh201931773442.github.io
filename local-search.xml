<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JavaScript学习笔记</title>
    <link href="/2022/06/29/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/06/29/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Js中的数据类型到底有几种"><a href="#Js中的数据类型到底有几种" class="headerlink" title="Js中的数据类型到底有几种?"></a>Js中的数据类型到底有几种?</h1><p>根据<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures">MDN官方文档</a>,一共有8种数据类型</p><ul><li>原始值（直接表示在语言底层的不可变数据）<ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B">布尔类型</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#null_%E7%B1%BB%E5%9E%8B">Null 类型</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#undefined_%E7%B1%BB%E5%9E%8B">Undefined 类型</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B">数字类型</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#bigint_%E7%B1%BB%E5%9E%8B">BigInt 类型</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B">字符串类型</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#%E7%AC%A6%E5%8F%B7%E7%B1%BB%E5%9E%8B">符号类型</a></li></ul></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#%E5%AF%B9%E8%B1%A1">对象</a>（一组属性的集合）</li></ul><h1 id="为什么number类型调用toString报错"><a href="#为什么number类型调用toString报错" class="headerlink" title="为什么number类型调用toString报错?"></a>为什么number类型调用toString报错?</h1><p>为什么1.toString()会报错，Number(1).tostring()就不报错？Number(1)返回的也是number类型的1</p><p>js中的点有两种，小数点和访问对象属性的点。如果一个表达式中有两个以上的点，那么第二个以及后面的点会被js引擎当做是访问对象属性的点。如’abc’.toString().slice(1).indexOf(‘c’) 。而第一个点就有两种情况了，有可能是小数点，也可能是访问对象属性的点。js引擎在解读以数字开头的第一个点时，有自己的一套方法去判断这个点是属于哪一种，然后再校验点后面的写法是否符合规范。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>.toString() <span class="hljs-regexp">//</span> Uncaught SyntaxError: Invalid or unexpected token  。此处是语法错误，并非引用错误。也就是说这种写法，这个点会被js引擎当做小数点，<span class="hljs-string">&#x27;toString()&#x27;</span> 会被作为一个不合法的浮点数来解释，类似于 <span class="hljs-number">1</span>.hello ,  <span class="hljs-number">1</span>.你好  都是此类语法错误。<br><br><span class="hljs-number">1.2</span>.toString() <span class="hljs-regexp">//</span> <span class="hljs-string">&quot;1.2&quot;</span>  。返回<span class="hljs-number">1.2</span>，第一个点被认为是小数点，第二个点被认为是用于访问属性的点，可以调用。<br><br><span class="hljs-number">1</span> .toString() <span class="hljs-regexp">//</span> <span class="hljs-string">&quot;1&quot;</span> 。<span class="hljs-number">1</span>后有空格，小数点前后不会有空格，所以这个点会被作为调用属性的点。<br><br><span class="hljs-number">1</span>..toString()  <span class="hljs-regexp">//</span> <span class="hljs-string">&quot;1&quot;</span> 。 <span class="hljs-number">1</span>后面两个点，第二个点是访问属性，前面的<span class="hljs-number">1</span>., 会被当做<span class="hljs-number">1.0</span><br><br><span class="hljs-number">1</span>[ <span class="hljs-string">&#x27;toString&#x27;</span> ] () <span class="hljs-regexp">//</span><span class="hljs-string">&quot;1&quot;</span> 。采用中括号来访问属性，也不会报错。这类似于立即函数调用<br></code></pre></td></tr></table></figure><p>再看上面的问题，Number(1).toString()，是对一个函数的返回值调用toString()，这个点当然会被js引擎当做访问属性的点，然后在对Number(1)的返回值number 1调用toString()方法，这个点没有被当做小数点。而1.toString()的点直接就被当做小数点了，所以会报错。</p><h1 id="JS中对象属性访问-获得对象中属性对应的值-和方法访问-调用对象中函数"><a href="#JS中对象属性访问-获得对象中属性对应的值-和方法访问-调用对象中函数" class="headerlink" title="JS中对象属性访问(获得对象中属性对应的值)和方法访问( 调用对象中函数)"></a>JS中对象属性访问(获得对象中属性对应的值)和方法访问( 调用对象中函数)</h1><p>对于一个JavaScript对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>            <span class="hljs-attr">uname</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>            <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>            <span class="hljs-attr">sayHai</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;nihao&#x27;</span><br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>调用其属性有两种方法</p><p><strong>. 调用</strong><br>.属性名的方式编码简单直观，易于使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">name</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">age</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">sayHello</span>)<span class="hljs-comment">//注意这里我没有加()，因此不算调用方法，只是输出函数</span><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">admin<br><span class="hljs-number">18</span><br>f（）&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;nihao&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>[]调用</strong><br>. 能完成的调用，[] 同样能完成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj[<span class="hljs-string">&#x27;name&#x27;</span>])<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj[<span class="hljs-string">&#x27;age&#x27;</span>])<br>obj[<span class="hljs-string">&#x27;sayHello&#x27;</span>]()<span class="hljs-comment">//注意这里我加了()，因此这里是在调用方法</span><br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">admin</span><br><span class="hljs-number">18</span><br>nihao<br></code></pre></td></tr></table></figure><p><strong>只能用 [] 而不能用 .</strong><br>在JavaScript中，有些情况我们调用对象中属性只能用 [] 的方式：</p><p><font style="color:skyblue">属性名包含特殊字符（- 空格）</font><br>当我们的属性名中出现了特殊字符，比如我们想要调用当前对象里的一个Content-Type属性，这时我们用 . 调用就会出现语法报错。<br>换成 [] 方式就可以了。</p><p><font style="color:skyblue">属性名是变量的形式</font><br>假如我们的属性名现在是以一个变量的形式存在的，那么我们使用两种方式分别设置一下属性，最后输出看看有何不同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;&#125;<br><br><span class="hljs-keyword">var</span> propName = <span class="hljs-string">&quot;name&quot;</span><br>obj.<span class="hljs-property">propName</span> = <span class="hljs-string">&quot;小李&quot;</span><br>obj[propName] = <span class="hljs-string">&quot;小张&quot;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj)<br><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua">&#123;propName:<span class="hljs-string">&#x27;小李&#x27;</span>，name:<span class="hljs-string">&#x27;小张&#x27;</span>&#125;<br>name:<span class="hljs-string">&quot;小张&quot;</span><br>propName:<span class="hljs-string">&quot;小李&quot;</span><br><span class="hljs-string">[[Prototype]]</span>:Object<br></code></pre></td></tr></table></figure><p>大家可以看到出现了两个属性，name和propName。如图 . 方式却把 propName 当做了一个属性名进行了处理，这显然不是我们想要的，我们想要的是第一个name属性。<br>因此如果我们想要以参数的形式访问属性，那就只能使用 [] 方式。</p><p>总结<br>如果 . 方式不影响功能，使用 . 方式当然是我们想看到的，只不过除了两个情况之外：</p><p>属性名中有特殊字符<br>属性名是变量的形式</p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Hexo和gitee搭建个人博客</title>
    <link href="/2022/06/28/%E4%BD%BF%E7%94%A8Hexo%E5%92%8Cgitee%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/06/28/%E4%BD%BF%E7%94%A8Hexo%E5%92%8Cgitee%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p><strong>hexo官方文档</strong>: <a href="https://hexo.io/zh-cn/docs/index.html">文档 | Hexo</a></p><span id="more"></span><p>我的博客地址</p><p> <a href="https://xsh201931773442.github.io/">https://xsh201931773442.github.io/</a></p><p><a href="https://saborking.gitee.io/">https://saborking.gitee.io/</a></p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><ul><li><p>Windows：下载并安装 <a href="https://git-scm.com/download/win">git</a>.</p></li><li><p>Mac：使用 <a href="http://mxcl.github.com/homebrew/">Homebrew</a>, <a href="http://www.macports.org/">MacPorts</a> 或者下载 <a href="http://sourceforge.net/projects/git-osx-installer/">安装程序</a>。</p></li><li><p>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></p></li><li><p>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></p></li></ul><blockquote><p>Mac 用户</p><p>如果在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 <strong>Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install</strong> 安装命令行工具。</p></blockquote><blockquote><p>Windows 用户</p><p>对于中国大陆地区用户，可以前往 <a href="https://npm.taobao.org/mirrors/git-for-windows/">淘宝 Git for Windows 镜像</a> 下载 git 安装包。</p></blockquote><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>Node.js 为大多数平台提供了官方的 <a href="https://nodejs.org/en/download/">安装程序</a>。对于中国大陆地区用户，可以前往 <a href="https://npm.taobao.org/mirrors/node">淘宝 Node.js 镜像</a> 下载。</p><p>其它的安装方法：</p><ul><li>Windows：通过 <a href="https://github.com/jasongin/nvs/">nvs</a>（推荐）或者 <a href="https://github.com/nvm-sh/nvm">nvm</a> 安装。</li><li>Mac：使用 <a href="https://brew.sh/">Homebrew</a> 或 <a href="http://www.macports.org/">MacPorts</a> 安装。</li><li>Linux（DEB&#x2F;RPM-based）：从 <a href="https://github.com/nodesource/distributions">NodeSource</a> 安装。</li><li>其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的 <a href="https://nodejs.org/en/download/package-manager/">指导</a>。</li></ul><p>对于 Mac 和 Linux 同样建议使用 nvs 或者 nvm，以避免可能会出现的权限问题。</p><blockquote><p>Windows 用户</p><p>使用 Node.js 官方安装程序时，请确保勾选 <strong>Add to PATH</strong> 选项（默认已勾选）</p></blockquote><blockquote><p>For Mac &#x2F; Linux 用户</p><p>如果在尝试安装 Hexo 的过程中出现 <code>EACCES</code> 权限错误，请遵循 <a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally">由 npmjs 发布的指导</a> 修复该问题。强烈建议 <strong>不要</strong> 使用 root、sudo 等方法覆盖权限</p></blockquote><blockquote><p>Linux</p><p>如果您使用 Snap 来安装 Node.js，在 <a href="https://hexo.io/zh-cn/docs/commands#init">初始化</a> 博客时您可能需要手动在目标文件夹中执行 <code>npm install</code>。</p></blockquote><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">$ npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><h2 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h2><p>打开命令行工具 检查对应程序的版本是否显示</p><p>git –version</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">C</span>:\Users\ASUS&gt;git --version<br><span class="hljs-attribute">git</span> version <span class="hljs-number">2</span>.<span class="hljs-number">35</span>.<span class="hljs-number">1</span>.windows.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>node -v</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">C:\Users\ASUS&gt;<span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br>v16.<span class="hljs-number">15.1</span><br></code></pre></td></tr></table></figure><p>npm -v</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-title">C:</span>\Users\ASUS&gt;npm -v<br>npm WARN config global `--global`, `--local` are deprecated. Use `--location=global` instead.<br><span class="hljs-number">8.11</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>hexo -v</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">C</span>:\Users\ASUS&gt;hexo -v<br><span class="hljs-attribute">hexo</span>-cli: <span class="hljs-number">4</span>.<span class="hljs-number">3</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">os</span>: win32 <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">19044</span><br><span class="hljs-attribute">node</span>: <span class="hljs-number">16</span>.<span class="hljs-number">15</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">v8</span>: <span class="hljs-number">9.4.146.24</span>-node.<span class="hljs-number">21</span><br><span class="hljs-attribute">uv</span>: <span class="hljs-number">1</span>.<span class="hljs-number">43</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">zlib</span>: <span class="hljs-number">1</span>.<span class="hljs-number">2</span>.<span class="hljs-number">11</span><br><span class="hljs-attribute">brotli</span>: <span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">ares</span>: <span class="hljs-number">1</span>.<span class="hljs-number">18</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">modules</span>: <span class="hljs-number">93</span><br><span class="hljs-attribute">nghttp2</span>: <span class="hljs-number">1</span>.<span class="hljs-number">47</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">napi</span>: <span class="hljs-number">8</span><br><span class="hljs-attribute">llhttp</span>: <span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4</span><br><span class="hljs-attribute">openssl</span>: <span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>o+quic<br><span class="hljs-attribute">cldr</span>: <span class="hljs-number">40</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">icu</span>: <span class="hljs-number">70</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">tz</span>: <span class="hljs-number">2021</span>a3<br><span class="hljs-attribute">unicode</span>: <span class="hljs-number">14</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">ngtcp2</span>: <span class="hljs-number">0</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-DEV<br><span class="hljs-attribute">nghttp3</span>: <span class="hljs-number">0</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-DEV<br></code></pre></td></tr></table></figure><h1 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h1><ol><li><p>在桌面(也可以是其他地方)创建一个名为blog的文件夹</p></li><li><p>进入文件夹右键选择 <code>git bush here</code> 输入 <code>hexo init </code>初始化 </p></li><li><p>初始化完成后，指定文件夹的目录如下：(文件夹相关详情请查阅<a href="https://hexo.io/zh-cn/docs/setup">官方文档</a>)</p><blockquote><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sqf">.<br>├── <span class="hljs-variable">_config</span>.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── <span class="hljs-variable">_drafts</span><br>|   └── <span class="hljs-variable">_posts</span><br>└── themes<br></code></pre></td></tr></table></figure></blockquote></li><li><p>生成静态文件 <code>hexo generate</code> 简写 <code>hexo g</code></p></li><li><p>启动服务器<code>hexo server </code> 简写 <code>hexo s</code>默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p></li><li><p>更改某些设置后 使用<code>hexo clean </code>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>) 再重复4步和5步。</p></li><li><p>发布到gitee </p><ol><li><p>在gitee上新建一个仓库</p><p>注意事项:在创建仓库时,尽量让仓库名、以及路径和<code>gitee</code>的登录名保持一致 否则部署上去后会有样式混乱,资源请求路径出错的问题</p></li><li><p>在blog&#x2F;_config.yml中找到以下配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">deploy:<br> <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>将其修改为</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> <br><span class="hljs-symbol">    gitee:</span><br><span class="hljs-symbol">      url:</span> https:<span class="hljs-comment">//gitee.com/xusenhai-nineteen/blog.git#自己的gitee地址</span><br><span class="hljs-symbol">      branch:</span> master<br></code></pre></td></tr></table></figure></li><li><p>安装插件<a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure></li><li><p>使用<code>hexo d </code>将代码推送到gitee</p></li><li><p>在gitee上的仓库中找到”服务” 点击gitee pages 按要求操作即可</p></li></ol></li><li><p><strong>发布新的文章</strong></p><p>你可以执行下列命令来创建一篇新文章或者新的页面。默认生成在blog&#x2F;sources&#x2F;posts&#x2F;路径下 </p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">$ hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><p>您可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p></li></ol><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>命令详情:<a href="https://hexo.io/zh-cn/docs/commands.html">指令 | Hexo</a></p><ol><li>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br></code></pre></td></tr></table></figure><ol start="2"><li>生成静态文件</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br></code></pre></td></tr></table></figure><ol start="3"><li>启动本地服务器</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><ol start="4"><li>代码推送到远程仓库</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><h1 id="博客美化"><a href="#博客美化" class="headerlink" title="博客美化"></a>博客美化</h1><h2 id="主题更改"><a href="#主题更改" class="headerlink" title="主题更改"></a>主题更改</h2><p>在<a href="https://hexo.io/zh-cn/docs/setup">官方文档</a>主题中搜索Fluid 进入,按照其中的文档指引下载,其中有用户文档,可自定义配置</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p>Fluid主题手册:</p><p><a href="https://hexo.fluid-dev.com/docs/guide/">配置指南 | Hexo Fluid 用户手册 (fluid-dev.com)</a></p><p>更换主题:</p><p>在blog根目录中的<code>_config.yml</code>中找到theme,将后面的内容修改为<code>hexo-theme-fluid</code></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"># Extensions<br>## Plugins: https:<span class="hljs-comment">//hexo.io/plugins/</span><br>## Themes: https:<span class="hljs-comment">//hexo.io/themes/</span><br>theme: hexo-theme-fluid<br></code></pre></td></tr></table></figure><h2 id="2d动漫人物-不重要"><a href="#2d动漫人物-不重要" class="headerlink" title="2d动漫人物(不重要)"></a>2d动漫人物(不重要)</h2><p>参考:</p><p><a href="https://blog.csdn.net/weixin_44517301/article/details/106348887?ops_request_misc=%7B%22request_id%22:%22165641934216781818773694%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165641934216781818773694&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~times_rank-5-106348887-null-null.142%5Ev24%5Epc_rank_34,157%5Ev15%5Enew_3&utm_term=hexo%E7%94%9F%E6%88%90%E5%8A%A8%E6%BC%AB%E4%BA%BA%E7%89%A9&spm=1018.2226.3001.4187">(159条消息) Hexo添加Live2D看板娘最新教程_隔壁郑同学的博客-CSDN博客_hexo看板娘</a></p><p>模型预览</p><p><a href="http://t.zoukankan.com/Friends-A-p-11054968.html">Hexo添加Live2D看板娘+模型预览 - 走看看 (zoukankan.com)</a></p><h1 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a>添加评论功能</h1><p>在Fluid<a href="https://hexo.fluid-dev.com/docs/guide/">配置指南 | Hexo Fluid 用户手册 (fluid-dev.com)</a>中找到评论选择自己要使用的评论插件</p><p>以Valine为例:</p><p>去到<a href="https://valine.js.org/quickstart.html">valine官网</a>上,根据<strong>快速开始</strong>注册账号并创建应用</p><p>根据Fluid<a href="https://hexo.fluid-dev.com/docs/guide/">配置指南 | Hexo Fluid 用户手册 (fluid-dev.com)</a>在<strong>主题配置</strong>中开启并指定评论模块</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs coq"># 评论插件<br># Comment plugin<br>comments:<br>  enable: true<br>  # 指定的插件，需要同时设置对应插件的必要参数<br>  # The specified plugin needs to <span class="hljs-built_in">set</span> the necessary parameters <span class="hljs-built_in">at</span> the same <span class="hljs-built_in">time</span><br>  # <span class="hljs-keyword">Options</span>: utterances | <span class="hljs-type">disqus</span> | <span class="hljs-type">gitalk</span> | <span class="hljs-type">valine</span> | <span class="hljs-type">waline</span> | <span class="hljs-type">changyan</span> | <span class="hljs-type">livere</span> | <br>  <span class="hljs-type">remark42</span> | <span class="hljs-type">twikoo</span> | <span class="hljs-type">cusdis</span> | <span class="hljs-type">giscus</span><br>  type: valine<br><br></code></pre></td></tr></table></figure><p>在<strong>主题配置</strong>中找到Valine进行配置,就可以看到效果了</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Valine</span><br><span class="hljs-comment"># 基于 LeanCloud</span><br><span class="hljs-comment"># Based on LeanCloud</span><br><span class="hljs-comment"># See: https://valine.js.org/</span><br><span class="hljs-attr">valine:</span><br>  <span class="hljs-attr">appId:</span> <span class="hljs-string">你的appid</span><br>  <span class="hljs-attr">appKey:</span> <span class="hljs-string">你的appkey</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br>  <span class="hljs-attr">placeholder:</span> <span class="hljs-string">快来评论吧~</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">&#x27;retro&#x27;</span><br>  <span class="hljs-attr">meta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>, <span class="hljs-string">&#x27;mail&#x27;</span>, <span class="hljs-string">&#x27;link&#x27;</span>]<br>  <span class="hljs-attr">requiredFields:</span> []<br>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">&#x27;zh-CN&#x27;</span><br>  <span class="hljs-attr">highlight:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">recordIP:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">serverURLs:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">emojiCDN:</span><br>  <span class="hljs-attr">emojiMaps:</span><br>  <span class="hljs-attr">enableQQ:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/28/hello-world/"/>
    <url>/2022/06/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p> <a href="https://xsh201931773442.github.io/">https://xsh201931773442.github.io/</a></p><p><a href="https://xusenhai-nineteen.gitee.io/blog/">https://xusenhai-nineteen.gitee.io/blog/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
